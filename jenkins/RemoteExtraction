def https_public_root = '/net/co2/c2sm-services/zonda-request/'

pipeline {
    agent {
        node {
            label 'co2'
        }
    }
    options {
    timeout(time: 6, unit: 'HOURS')
    }
    stages {
        stage('Create archive') {
            steps {
                sh """
                mkdir -p ${WORKSPACE}/output/logs
                """
            }
        }
        stage('Create Hash from Build ID') {
            steps {
                sh """
                python3 src/hash.py --hash-file ${WORKSPACE}/hash.txt
                """
            }
        }
        stage('Validate User Input') {
            steps {
                withCredentials([string(credentialsId: 'd976fe24-cabf-479e-854f-587c152644bc', variable: 'GITHUB_AUTH_TOKEN')]) {
                    sh """
                    python3 src/validate_user_input.py --auth_token ${GITHUB_AUTH_TOKEN} --issue_id_file ${WORKSPACE}/issue.txt ||
                    (echo "The request you submitted is not valid! \n Please check for typos or wrong format of JSON" > ${WORKSPACE}/output/logs/pipeline.log &&
                    exit 1)
                    """
                }
            }
        }
        stage('Run GridExtpar') {
            steps {
                sh """
                python3 src/GridExtpar.py --config config.json --workspace ${WORKSPACE} --logfile ${WORKSPACE}/output/logs/gridextpar.log
                """
            }
        }
    }
    post {
        success {
            sh "python3 src/archive_artifacts.py --workspace ${WORKSPACE} --destination ${https_public_root} --hash-file ${WORKSPACE}/hash.txt --sucess"
            withCredentials([string(credentialsId: 'd976fe24-cabf-479e-854f-587c152644bc', variable: 'GITHUB_AUTH_TOKEN')]) {
                sh "python3 src/report.py --auth_token ${GITHUB_AUTH_TOKEN} --issue_id_file ${WORKSPACE}/issue.txt --hash-file ${WORKSPACE}/hash.txt"
            }
            deleteDir()
        }
        failure {
            sh "python3 src/archive_artifacts.py --workspace ${WORKSPACE} --destination ${https_public_root} --hash-file ${WORKSPACE}/hash.txt"
            withCredentials([string(credentialsId: 'd976fe24-cabf-479e-854f-587c152644bc', variable: 'GITHUB_AUTH_TOKEN')]) {
                sh "python3 src/report.py --auth_token ${GITHUB_AUTH_TOKEN} --issue_id_file ${WORKSPACE}/issue.txt --hash-file ${WORKSPACE}/hash.txt --failure"
            }
            deleteDir()
        }
        aborted {
            sh "python3 src/archive_artifacts.py --workspace ${WORKSPACE} --destination ${https_public_root} --hash-file ${WORKSPACE}/hash.txt"
            withCredentials([string(credentialsId: 'd976fe24-cabf-479e-854f-587c152644bc', variable: 'GITHUB_AUTH_TOKEN')]) {
                sh "python3 src/report.py --auth_token ${GITHUB_AUTH_TOKEN} --issue_id_file ${WORKSPACE}/issue.txt --hash-file ${WORKSPACE}/hash.txt --abort"
            }
            deleteDir()
        }
    }
}
